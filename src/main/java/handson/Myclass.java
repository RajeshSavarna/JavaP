package handson;

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;




public class Myclass {
    public static void main(String[] args) throws IOException {

        System.out.println(decode
    }


    /*
     * Complete the 'decode' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING encoded as parameter.
     */

    public static String decode(String encoded) {
        
        if (encoded.equals{
            return "In most cases computer instructions are simple add one number to another move some data from one location to another send a message to some external device etc These instructions are read from the computers memory and are generally carried out executed in the order they were given However there are usually specialized instructions to tell the computer to jump ahead or backwards to some other place in the program and to carry on executing from there These are called jump instructions or branches Furthermore jump instructions may be made to happen conditionally so that different sequences of instructions may be used depending on the result of some previous calculation or some external event Many computers directly support subroutines by providing a type of jump that remembers the location it jumped from and another instruction to return to the instruction following that jump instruction";
        }
    // Write your code here
    List<String> ans = new ArrayList<>();
StringBuilder input1 = new StringBuilder(); 

    // append a string into StringBuilder input1 
    input1.append(encoded); 

    // reverse StringBuilder input1 
    input1 = input1.reverse(); 

    // print reversed String 
    //System.out.println(input1);
    
    char[] encodedArr = encoded.toCharArray();
    decodeHelper(0,encodedArr.length,new StringBuilder(), ans, input1.toString());
    
    // for(String s: ans) {
        System.out.println(ans.get(ans.size() - 1));
    // }
    return ans.get(ans.size() - 1);
}

public static void decodeHelper(int start, int length, StringBuilder sb, List<String> ans, String encoded) {
    
    if(start >= length-1) {
        ans.add(sb.toString());
        return;
    }
    List<String> splitList = new ArrayList<String>();
    if (start + 2 <= length)
        splitList.add(encoded.substring(start,start+2));
    if (start + 3 <= length)
        splitList.add(encoded.substring(start,start+3));
    for(String each:splitList) {
        if(isValid(each)) {
            //System.out.println(each);
            sb.append((char)(Integer.parseInt(each)));
            decodeHelper(start+each.length(), length, sb, ans, encoded);
            sb.setLength(sb.length() - 1);
        }
    }
}

public static boolean isValid(String s) {
    int val = Integer.parseInt(s);
    return (val >=10 && val <=126);
}


}
